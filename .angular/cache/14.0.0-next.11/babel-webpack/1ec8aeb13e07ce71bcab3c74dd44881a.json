{"ast":null,"code":"// \"Reverse Proxy\": eingehende Requests werden an einen anderen HTTP-Server\n// weitergeleitet (\"forward\") und analog wird der Response an den aufrufenden\n// Client weitergeleitet.\n// Dabei werden ggf. Header-Daten umgeschrieben, Transformationen zwischen\n// HTTP und HTTPS koennen noetig sein und GZip-Komprimierung kann erfolgen.\n// Vorteile fuer ein abgeschirmtes Backend:\n// + HTTPS\n// + (De-) Komprimierung mit GZip\n// + API-Gateway mit Routing\n\n/**\r\n * Basis-Pfad fuer den REST-Server wahlweise via:\r\n * 1) Reverse Proxy oder\r\n * 2) CORS bei Kubernetes, wozu Port-Forwarding fuer den Web Service\r\n *    erforderlich ist, der auch in K8s mit TLS l√§uft.\r\n */\n// webpack dev server und nginx als \"Reverse Proxy\", d.h. eingehende Requests\nconst PATH_REST = '/rest'; // CORS mit dem Appserver \"kunde\" (in Kubernetes):\n// const PATH_REST = 'https://localhost:3000';\n\nexport const paths = {\n  api: `${PATH_REST}/api`,\n  login: `${PATH_REST}/auth/login`\n};","map":null,"metadata":{},"sourceType":"module"}