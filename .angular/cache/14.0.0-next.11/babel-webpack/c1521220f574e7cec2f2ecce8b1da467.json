{"ast":null,"code":"import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport log from 'loglevel';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n      log.debug('AuthInterceptor.constructor()');\n    }\n\n    intercept( // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    request, next) {\n      const authorizationStr = `${this.authService.authorization}`;\n      log.debug('authorizationStr=', authorizationStr);\n      const requestWithAuthorization = request.clone({\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        setHeaders: {\n          Authorization: authorizationStr\n        }\n      });\n      return next.handle(requestWithAuthorization);\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac,\n    providedIn: 'root'\n  }); // https://angular.io/guide/http#intercepting-requests-and-responses\n  // https://next.angular.io/guide/http#intercepting-requests-and-responses\n\n  return AuthInterceptor;\n})();\nexport const authInterceptorProvider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: AuthInterceptor,\n  multi: true\n};","map":null,"metadata":{},"sourceType":"module"}