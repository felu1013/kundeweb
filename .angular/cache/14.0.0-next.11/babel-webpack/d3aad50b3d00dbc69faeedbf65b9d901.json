{"ast":null,"code":"// statt console.log(...)\nimport log from 'loglevel';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./layout/footer/footer.component\";\nimport * as i2 from \"./layout/header/header.component\";\nimport * as i3 from \"./layout/main/main.component\"; // JIT (= Just-in-time) Compiler: Uebersetzung zur Laufzeit, d.h. dynamisch\n// AoT (= Ahead-of-Time) Compiler: statische Übersetzung fuehrt zu weniger Code bzw. kleinerem Bundle\n// Web-Komponente (\"web component\"): Zusammenfassung von\n//  * HTML-Fragment\n//  * Shadow DOM fuer das HTML-Fragment\n//  * CSS-Stil fuer das HTML-Fragment\n//  * Logik durch JavaScript\n// https://developer.mozilla.org/docs/Web/Web_Components\n// https://developer.mozilla.org/docs/Web/Web_Components/Shadow_DOM\n// BackboneJS war 2010 das erste komponentenorientierte, clientseitige Web-Framework\n// \"Composite Pattern\" bei UIs: Eine UI-Komponente besteht aus wiederum aus\n// einfachen UI-Komponenten, z.B. ein Suchformular besteht aus einem Label,\n// einem Eingabefeld und einem Button.\n// Eine Komponente (= funktionale Einheit) ist an das MVC-Pattern angelehnt:\n// sie besteht aus einem HTML-Template (= View) und der zugehoerigen\n// Dialogsteuerung (= Controller) mit dem Model als Bindeglied.\n// Controller sind klein (\"Thin Controllers\") und die Anwendungslogik wird\n// in die Service-Klassen ausgelagert.\n// Innerhalb der Wurzelkomponente werden die Kindkomponenten geladen.\n// https://angular.io/docs/js/latest/api/annotations/ComponentAnnotation-class.html\n// Metadaten-Annotationen in Angular sind z.B. @Component.\n// Annotationen sind ein Spezialfall der Decorators:\n// Ein Decorator *ergaenzt* die vorhandene Funktionalitaet von einer Klasse oder\n// einer Methode oder einem Attribut oder einem Methodenargument.\n// siehe https://github.com/wycats/javascript-decorators\n\n/**\r\n * Wurzelkomponente mit dem Tag &lt;hs-root&gt;\r\n */\n// Definitionsklasse ~ Controller: Eingabedaten entgegennehmen, Model fuer die\n// View aktualisieren, Funktionen fuer die Benutzer-Interaktion bereitstellen,\n// z.B. onClick oder onSubmit\n// Die Doku zu Angular haengt immer noch den Suffix \"Component\" an die Klasse\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor() {\n      log.debug('AppComponent.constructor()');\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"hs-root\"]],\n    decls: 3,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"hs-header\")(1, \"hs-main\")(2, \"hs-footer\");\n      }\n    },\n    dependencies: [i1.FooterComponent, i2.HeaderComponent, i3.MainComponent],\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}