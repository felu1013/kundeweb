{"ast":null,"code":"var _KundeWriteService_instances, _KundeWriteService_baseUrl, _KundeWriteService_mapSaveResultToId, _KundeWriteService_mapUpdateResultToVerion;\n\nimport { __classPrivateFieldGet, __rest } from \"tslib\"; // eslint-disable-next-line @typescript-eslint/consistent-type-imports\n\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { RemoveError, SaveError, UpdateError } from './errors';\nimport { catchError, first, map } from 'rxjs/operators';\nimport log from 'loglevel';\nimport { of } from 'rxjs';\nimport { paths } from '../../shared';\nimport { toKundeServer } from './kundeServer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\r\n * Die Service Klasse zum Kunden wird zum \"Root Application Injector\"\r\n * hinzugefügt und ist in allen Klassen der Webanwendung verfügbar\r\n */\n\nexport class KundeWriteService {\n  /**\r\n   * @param HttpClient injizierter Service HttpClient\r\n   * @return void\r\n   */\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n\n    _KundeWriteService_instances.add(this);\n\n    _KundeWriteService_baseUrl.set(this, paths.api);\n\n    log.debug('KundeWriteService.constructor: baseUrl=', __classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\"));\n  }\n  /**\r\n   * Einen neuen Kunden anlegen\r\n   * @param neuerKunde Das JSON Objekt mit dem neuen Kunden\r\n   */\n\n\n  save(kunde) {\n    log.debug('KundeWriteService.save: kunde=', kunde);\n    /* eslint-disable @typescript-eslint/naming-convention */\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Accept: 'text/plain'\n    });\n    /* eslint-enable @typescript-eslint/naming-convention */\n\n    return this.httpClient.post(__classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\"), toKundeServer(kunde), {\n      headers,\n      observe: 'response',\n      responseType: 'text'\n    }).pipe(first(), // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => {\n      const errResponse = err;\n      return of(new SaveError(errResponse.status, errResponse));\n    }), map(result => __classPrivateFieldGet(this, _KundeWriteService_instances, \"m\", _KundeWriteService_mapSaveResultToId).call(this, result)));\n  }\n  /**\r\n   * Ein vorhandenen Kunden aktualisieren\r\n   * @param kunde Das JSON Objekt mit den aktualisieren Kundendaten\r\n   */\n\n\n  update(kunde) {\n    log.debug('KundeWriteService.update: kunde=', kunde);\n\n    const {\n      id,\n      version,\n      adresse\n    } = kunde,\n          kundeDTO = __rest(kunde, [\"id\", \"version\", \"adresse\"]); // eslint-disable-line @typescript-eslint/no-unused-vars\n\n\n    if (version === undefined) {\n      const msg = `Keine Versionsnummer fuer den Kunde ${id}`;\n      log.debug(msg);\n      return of(new UpdateError(-1, msg));\n    }\n\n    const url = `${__classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\")}/${id}`;\n    /* eslint-disable @typescript-eslint/naming-convention */\n\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Accept: 'text/plain',\n      'If-Match': `\"${version}\"`\n    });\n    /* eslint-enable @typescript-eslint/naming-convention */\n\n    log.debug('KundeWriteService.update: headers=', headers);\n    log.debug('KundeWriteService.update: kundeDTO=', kundeDTO);\n    return this.httpClient.put(url, kundeDTO, {\n      headers,\n      observe: 'response'\n    }).pipe(first(), // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => {\n      const errResponse = err;\n      log.debug('KundeWriteService.update: err=', err);\n      return of(new UpdateError(errResponse.status, errResponse));\n    }), map(result => __classPrivateFieldGet(this, _KundeWriteService_instances, \"m\", _KundeWriteService_mapUpdateResultToVerion).call(this, result)), map(versionOderError => {\n      if (versionOderError instanceof UpdateError) {\n        return versionOderError;\n      }\n\n      kunde.version = versionOderError;\n      return kunde;\n    }));\n  }\n  /**\r\n   * Ein Kunde löschen\r\n   * @param kunde Das JSON Objekt mit dem zu löschenden Kunde\r\n   */\n\n\n  remove(kunde) {\n    log.debug('KundeWriteService.remove: kunde=', kunde);\n    const url = `${__classPrivateFieldGet(this, _KundeWriteService_baseUrl, \"f\")}/${kunde.id}`;\n    return this.httpClient.delete(url).pipe(first(), // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    catchError((err, _$) => {\n      const errResponse = err;\n      return of(new RemoveError(errResponse.status));\n    }), map(result => {\n      if (result instanceof RemoveError) {\n        return result;\n      }\n\n      return {};\n    }));\n  }\n\n}\n_KundeWriteService_baseUrl = new WeakMap(), _KundeWriteService_instances = new WeakSet(), _KundeWriteService_mapSaveResultToId = function _KundeWriteService_mapSaveResultToId(result) {\n  if (!(result instanceof HttpResponse)) {\n    return result;\n  }\n\n  const response = result;\n  log.debug('KundeWriteService.#mapSaveResultToId: map: response', response);\n  const location = response.headers.get('Location');\n  const id = location === null || location === void 0 ? void 0 : location.slice(location.lastIndexOf('/') + 1);\n\n  if (id === undefined) {\n    return new SaveError(-1, 'Keine Id');\n  }\n\n  return id;\n}, _KundeWriteService_mapUpdateResultToVerion = function _KundeWriteService_mapUpdateResultToVerion(result) {\n  var _a;\n\n  if (result instanceof UpdateError) {\n    return result;\n  }\n\n  const response = result;\n  log.debug('KundeWriteService.#mapUpdateResultToVersion: response', response);\n  const etag = response.headers.get('ETag');\n  log.debug('KundeWriteService.#mapUpdateResultToVersion: etag=', etag);\n  const ende = etag === null || etag === void 0 ? void 0 : etag.lastIndexOf('\"\"');\n  const versionStr = (_a = etag === null || etag === void 0 ? void 0 : etag.slice(1, ende)) !== null && _a !== void 0 ? _a : '1';\n  return Number.parseInt(versionStr, 10);\n};\n\nKundeWriteService.ɵfac = function KundeWriteService_Factory(t) {\n  return new (t || KundeWriteService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nKundeWriteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: KundeWriteService,\n  factory: KundeWriteService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module"}