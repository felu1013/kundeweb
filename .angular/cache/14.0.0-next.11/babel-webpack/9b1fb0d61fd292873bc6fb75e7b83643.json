{"ast":null,"code":"var _StorageService_instances, _StorageService_getCookie, _StorageService_setCookie, _StorageService_deleteCookie;\n\nimport { __classPrivateFieldGet } from \"tslib\";\nimport { Temporal } from '@js-temporal/polyfill';\nimport log from 'loglevel';\nimport * as i0 from \"@angular/core\"; // Namen der Cookies: nur als Speichermechanismus (nicht zum Server übertragen):\n// Ablaufdatum oder Session-Cookie (Lebensdauer gebunden an Tab).\n// Kein XSS (Cross-Site Scripting) wie bei Local Storage\n// Evtl. CSRF (Cross-Site Request Forgery)\n\nexport class StorageService {\n  constructor() {\n    _StorageService_instances.add(this);\n\n    log.debug('StorageService.constructor()');\n  }\n\n  get authorization() {\n    return __classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_getCookie).call(this, StorageService.AUTHORIZATION);\n  }\n\n  saveAuthorization(authorization, roles, expirationInMillis = Temporal.Now.instant().add({\n    minutes: 60\n  }).epochMilliseconds) {\n    __classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_setCookie).call(this, StorageService.AUTHORIZATION, authorization, expirationInMillis); // z.B. ['admin', 'mitarbeiter'] -> 'admin,mitarbeiter'\n\n\n    const rolesStr = roles.join(StorageService.SEPARATOR);\n    log.debug('StorageService.saveAuthorization: rolesStr=', rolesStr);\n\n    __classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_setCookie).call(this, StorageService.ROLES, rolesStr, expirationInMillis);\n  }\n\n  get roles() {\n    // z.B. 'admin,mitarbeiter'\n    const rolesStr = __classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_getCookie).call(this, StorageService.ROLES); // z.B. ['admin', 'mitarbeiter']\n\n\n    return rolesStr === undefined ? [] : rolesStr.split(StorageService.SEPARATOR);\n  }\n\n  deleteAuthorization() {\n    __classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_deleteCookie).call(this, StorageService.AUTHORIZATION);\n\n    __classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_deleteCookie).call(this, StorageService.ROLES);\n  }\n\n}\n_StorageService_instances = new WeakSet(), _StorageService_getCookie = function _StorageService_getCookie(name) {\n  const encodedName = encodeURIComponent(name);\n  const regexp = new RegExp(`(?:^${encodedName}|;\\\\s*${encodedName})=(.*?)(?:;|$)`, 'gu'); // alle Cookies durchsuchen\n\n  const result = regexp.exec(document.cookie);\n\n  if (result === null) {\n    return;\n  }\n\n  const [, encoded] = result;\n\n  if (encoded === undefined) {\n    return;\n  } // z.B. %20 durch Leerzeichen ersetzen\n\n\n  return decodeURIComponent(encoded);\n}, _StorageService_setCookie = function _StorageService_setCookie(name, value, expires, path, domain) {\n  let cookieStr = `${encodeURIComponent(name)}=${encodeURIComponent(value)};`;\n\n  if (expires !== undefined) {\n    // TODO Das neue \"Temporal API\" bietet keine Konvertierung in einen UTC-String\n    const expirationDate = new Date(expires);\n    cookieStr += `expires=${expirationDate.toUTCString()};`;\n  }\n\n  if (path !== undefined) {\n    cookieStr += `path=${path};`;\n  }\n\n  if (domain !== undefined) {\n    cookieStr += `domain=${domain};`;\n  } // Kein Zugriff mit JavaScript; Uebertragung nur mit HTTPS\n  // cookieStr += 'HttpOnly; Secure;'\n  // Uebertragung nur mit HTTPS\n\n\n  cookieStr += 'Secure;'; // Schutz vor XSS\n\n  cookieStr += 'SameSite=Strict;';\n  log.debug('StorageService.#setCookie: ', cookieStr); // neues Cookie anlegen\n\n  document.cookie = cookieStr; // cookieStore ist nur bei HTTPS verfuegbar und nicht in jedem Browser\n  // await cookieStore.set({\n  //     name,\n  //     value,\n  //     expires: ...,\n  //     domain,\n  // });\n}, _StorageService_deleteCookie = function _StorageService_deleteCookie(name, path, domain) {\n  if (__classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_getCookie).call(this, name) !== undefined) {\n    // expires in der Vergangenheit\n    __classPrivateFieldGet(this, _StorageService_instances, \"m\", _StorageService_setCookie).call(this, name, '', -1, path, domain);\n  }\n};\nStorageService.AUTHORIZATION = 'authorization';\nStorageService.ROLES = 'roles';\nStorageService.SEPARATOR = ',';\n\nStorageService.ɵfac = function StorageService_Factory(t) {\n  return new (t || StorageService)();\n};\n\nStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StorageService,\n  factory: StorageService.ɵfac,\n  providedIn: 'root'\n});","map":null,"metadata":{},"sourceType":"module"}